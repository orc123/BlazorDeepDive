@page "/servers"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<h3>Servers</h3>

<br />
<br />
<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase) ? "border-primary" : "")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="...">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" @onclick="@(() => { SelectCity(city); })">@city</button>
                    </div>
                </div>

            </div>
        }
    </div>
</div>

<br />

<div class="input-group mb-3">
    <input type="type" class="form-control" placeholder="Search Servers" @bind-value="serverFilter" @bind-value:event="oninput" />
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>
<br />

<ul>
    <Virtualize Items="this.servers" Context="item">
        <li @key="item.ServerId">
            @item.Name in @item.City is <span style="color:@(item.IsOnline ? "green": "red")">@(item.IsOnline ? "online" : "offline")</span>
            &nbsp;
            <a href="/servers/@item.ServerId" class="btn btn-link">Edit</a>
            &nbsp;
            <EditForm Model="item" FormName="@($"form-server-{item.ServerId}")" OnValidSubmit="@(() => {DeleteServer(item.ServerId);})">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </li>
    </Virtualize>
</ul>

<p>
    <a href="/servers/add" class="btn btn-primary">Add</a>
</p>

<p>
    <button class="btn btn-secondary"
        @onclick="@(() => {
            this.servers.Insert(0, new Server {Name = "ServerA", City = "Toronto"});
        })">
        Add Server 2
    </button>
</p>

@code {
    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");

    private List<String> cities = CitiesRepository.GetCities();

    private string selectedCity = "Toronto";

    private string _serverFilter = "";
    private string serverFilter
    {
        get => _serverFilter; 
        set
        {
            _serverFilter = value;
            this.servers = ServersRepository.SearchServers(_serverFilter);
        }
    }

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.Refresh();
        }
    }

    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;

        this.servers = ServersRepository.GetServersByCity(this.selectedCity);

        if (cityName == "Halifax")
        {
            for (int i = 16; i < 2000; i++)
            {
                servers.Add(new Server() { ServerId = i, Name = $"Server{i}", City = "Halifax" });
            }            
        }
    }

    private void HandleSearch()
    {
        this.servers = ServersRepository.SearchServers(serverFilter);

        this.selectedCity = string.Empty;
    }
}
