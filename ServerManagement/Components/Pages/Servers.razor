@page "/servers"
@page "/servers/back_from/{cityName}"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<h3>Servers</h3>

<br />
<br />
<CityListComponent @ref="cityListComponent" SelectCityCallback="HandCitySelection" selectedCity="@selectedCity"></CityListComponent>

<br />

<SearchBarComponent 
    SearchServerCallback="HandleSearchServer" 
    @ref="searchBarComponent" 
    style="width: 1000px"
    data-my-attribute="my data"></SearchBarComponent>
<br />

<CascadingValue Name="SelectedCity" Value="@selectedCity">
    <ServerListComponent 
        @rendermode="InteractiveServer" 
        CityName="@selectedCity" 
        SearchFilter="@searchFilter">
    </ServerListComponent>
</CascadingValue>
<p>
    <a href="/server/" class="btn btn-primary">Add</a>
</p>


@code {

    [Parameter]
    public string? CityName { get; set; }

    private string selectedCity { get; set; } = "Toronto";
    private string searchFilter = "";
    private CityListComponent? cityListComponent;
    private SearchBarComponent? searchBarComponent;

    private void HandCitySelection(string cityName)
    {
        this.selectedCity = cityName;
        this.searchFilter = string.Empty;
        searchBarComponent?.ClearFilter();
    }


    private void HandleSearch()
    {
        //this.servers = ServersRepository.SearchServers(serverFilter);

        //this.selectedCity = string.Empty;
    }

    private void HandleSearchServer(string searchFilter)
    {
        this.searchFilter = searchFilter;

        cityListComponent?.ClearSelection();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (NavigationManager.Uri.Contains("back_from") && !string.IsNullOrWhiteSpace(CityName))
            {
                selectedCity = CityName;
                StateHasChanged();
            }
        }
    }
}
